Um die geforderte Python-App zu erstellen, werden wir die folgenden Schritte durchführen:

1. Erstellen einer Konfigurationsdatei für den API-Schlüssel.
2. Implementieren einer Klasse zur Interaktion mit der OpenWeatherMap API.
3. Implementieren einer Klasse zur Verarbeitung und Anzeige der Wetterdaten.
4. Erstellen des Hauptprogramms, das die Klassen verwendet.

### 1. Konfigurationsdatei
Zuerst erstellen wir eine Konfigurationsdatei `config.yaml` im Verzeichnis `etc`.

```yaml
#Filename: etc/config.yaml
api_key: "DEIN_API_SCHLÜSSEL_HIER"
#EOF
```

### 2. Wetter-API-Klasse
Erstellen wir eine Klasse `WeatherAPI` im Verzeichnis `modules`, die die Wetterdaten von OpenWeatherMap abruft.

```python
#Filename: modules/weather_api.py
import requests
import yaml

class WeatherAPI:
    def __init__(self, config_path):
        self.api_key = self.load_api_key(config_path)
        self.base_url = "http://api.openweathermap.org/data/2.5/forecast"

    def load_api_key(self, config_path):
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)
        return config['api_key']

    def get_weather(self, city):
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric'
        }
        try:
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as http_err:
            print(f"HTTP error occurred: {http_err}")
        except Exception as err:
            print(f"Other error occurred: {err}")
        return None
#EOF
```

### 3. Wetteranzeige-Klasse
Erstellen wir eine Klasse `WeatherDisplay` im Verzeichnis `modules`, die die Wetterdaten verarbeitet und anzeigt.

```python
#Filename: modules/weather_display.py
class WeatherDisplay:
    def __init__(self, weather_data):
        self.weather_data = weather_data

    def display(self):
        if not self.weather_data:
            print("Keine Wetterdaten verfügbar.")
            return

        city = self.weather_data['city']['name']
        print(f"Wettervorhersage für {city}:")

        for i in range(0, 24 * 3, 8):  # Daten für heute und die nächsten 2 Tage (alle 8 Stunden)
            forecast = self.weather_data['list'][i]
            date = forecast['dt_txt']
            temp = forecast['main']['temp']
            rain_prob = forecast.get('rain', {}).get('3h', 0)
            print(f"{date}: Temperatur: {temp}°C, Regenwahrscheinlichkeit: {rain_prob}mm")
#EOF
```

### 4. Hauptprogramm
Erstellen wir das Hauptprogramm `main.py`, das die Klassen verwendet.

```python
#Filename: main.py
from modules.weather_api import WeatherAPI
from modules.weather_display import WeatherDisplay

def main():
    config_path = 'etc/config.yaml'
    city = "Hausleiten,AT"

    weather_api = WeatherAPI(config_path)
    weather_data = weather_api.get_weather(city)

    weather_display = WeatherDisplay(weather_data)
    weather_display.display()

if __name__ == "__main__":
    main()
#EOF
```

### Zusammenfassung der Dateien und Verzeichnisse:

- etc/config.yaml (Konfigurationsdatei für den API-Schlüssel)
- modules/weather_api.py (Klasse zur Interaktion mit der OpenWeatherMap API)
- modules/weather_display.py (Klasse zur Verarbeitung und Anzeige der Wetterdaten)
- main.py (Hauptprogramm)

Stellen Sie sicher, dass Sie den API-Schlüssel in der `config.yaml` Datei einfügen und alle Abhängigkeiten wie `requests` und `pyyaml` installiert haben (`pip install requests pyyaml`).